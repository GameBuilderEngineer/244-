//=============================================================================
// キーボード操作説明処理 [KeyOpe.cpp]
// 制作者 飯塚春輝
//=============================================================================
#include "KeyOpe.h"
//*****************************************************************************
// 定数
//*****************************************************************************
const static int		WIDTH = ((3840 / 2) - 16);					// キーボード操作説明横サイズ
const static int		HEIGHT = ((2160 / 2) - 9);					// キーボード操作説明縦サイズ
const static float		POSITION_X = ((WINDOW_WIDTH / 2) - 8.5f);	// キーボード操作説明X座標
const static float		POSITION_Y = ((WINDOW_HEIGHT / 2) - 10.0f);	// キーボード操作説明Y座標
//*****************************************************************************
// グローバル変数
//*****************************************************************************
int KeyOpe::cntUI = -1;
LPDIRECT3DTEXTURE9 KeyOpe::textureKeyOpe = NULL;					// キーボード操作説明テクスチャ
//=============================================================================
// コンストラクタ
//=============================================================================
KeyOpe::KeyOpe()
{
	cntUI++;
}
//=============================================================================
// デストラクタ
//=============================================================================
KeyOpe::~KeyOpe()
{
}
//=============================================================================
// 初期化処理
//=============================================================================
HRESULT KeyOpe::initialize(LPDIRECT3DDEVICE9 device, int _playerNumber, TextureLoader*textureLoader)
{
	// プレイヤーナンバー
	playerNumber = _playerNumber;

	// テクスチャを読み込む
	setVisualDirectory();

	textureKeyOpe = *textureLoader->getTexture(textureLoaderNS::OPERATION_KEYBOARD);

	// キーボード説明画像初期化
	Sprite::initialize(device,
		textureKeyOpe,								// テクスチャ
		spriteNS::CENTER,							// 原点
		WIDTH,										// 横幅
		HEIGHT,										// 高さ
		D3DXVECTOR3(POSITION_X, POSITION_Y, 0.0f),	// 座標
		D3DXVECTOR3(0.0f, 0.0f, 0.0f),				// 回転
		KEY_OPE_COLOR								// 色
	);

	return S_OK;
}
//=============================================================================
// 終了処理
//=============================================================================
void KeyOpe::uninitialize(void)
{
}
//=============================================================================
// 更新処理
//=============================================================================
void KeyOpe::update(void)
{
}
//=============================================================================
// 描画処理
//=============================================================================
void KeyOpe::render(LPDIRECT3DDEVICE9 device)
{
	// キーボード説明画像描画
	Sprite::render(device);
}

