//=============================================================================
// チンギンUI処理 [ChinginUI.cpp]
//
//=============================================================================
#include "ChinginUI.h"

//*****************************************************************************
// 定数・マクロ
//*****************************************************************************
const static int		WIDTH = 25;							// 横サイズ
const static int		HEIGHT = 75;						// 縦サイズ	
															// X座標
const static float		POSITION_X_PLAYER1 = WINDOW_WIDTH / 2.0f - 100.0f;
const static float		POSITION_X_PLAYER2 = POSITION_X_PLAYER1 + WINDOW_WIDTH / 2.0f;
const static float		POSITION_Y = WINDOW_HEIGHT - 10;	// Y座標
#define DEFAULT_COLOR	(D3DCOLOR_RGBA(255, 255, 255, 255))	// バーの色

//*****************************************************************************
// グローバル変数
//*****************************************************************************
int ChinginUI::cntUI = -1;

//=============================================================================
// コンストラクタ
//=============================================================================
ChinginUI::ChinginUI(void)
{
	cntUI++;
}


//=============================================================================
// デストラクタ
//=============================================================================
ChinginUI::~ChinginUI(void)
{
}


//=============================================================================
// 初期化処理
//=============================================================================
HRESULT ChinginUI::initialize(LPDIRECT3DDEVICE9 device, int _playerNumber, TextureLoader*textureLoader)
{
	playerNumber = _playerNumber;

	return S_OK;
}


//=============================================================================
// 終了処理
//=============================================================================
void ChinginUI::uninitialize(void)
{

	// インスタンスが存在しなければテクスチャ解放
	cntUI--;
}


//=============================================================================
// 更新処理
//=============================================================================
void ChinginUI::update(void)
{
}


//=============================================================================
// 描画処理
//=============================================================================
void ChinginUI::render(LPDIRECT3DDEVICE9 device)
{
	Sprite::render(device);
}


